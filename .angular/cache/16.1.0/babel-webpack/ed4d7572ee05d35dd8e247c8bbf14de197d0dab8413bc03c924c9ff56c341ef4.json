{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class QuizService {\n  constructor() {\n    this.currentIdxSubject = new BehaviorSubject(0);\n    this.correctCountSubject = new BehaviorSubject(0);\n    this.progressWidthSubject = new BehaviorSubject('184px');\n    this.currentIdx$ = this.currentIdxSubject.asObservable();\n    this.correctCount$ = this.correctCountSubject.asObservable();\n    this.progressWidth$ = this.progressWidthSubject.asObservable();\n    this.quizData = [{\n      id: Math.random().toString(),\n      question: 'How many oceans are there ?',\n      answers: ['Seven', 'Two', 'Four', 'Nine'],\n      correctAnswer: 3\n    }, {\n      id: Math.random().toString(),\n      question: 'Who discovered America ?',\n      answers: ['Mozart', 'Fernan Magellan', 'Vasco Da Gamma', 'Christopher Colombos'],\n      correctAnswer: 4\n    }, {\n      id: Math.random().toString(),\n      question: 'Who is the author of the picture \"Scream\" ?',\n      answers: ['Edvard Munch', 'Salvador Dali', 'Michelangelo', 'Luciano Pavarotti'],\n      correctAnswer: 1\n    }, {\n      id: Math.random().toString(),\n      question: 'Who won the World Cup 2023 ?',\n      answers: ['Armenia', 'Argentina', 'Brazil', 'France'],\n      correctAnswer: 2\n    }, {\n      id: Math.random().toString(),\n      question: 'Who is the best soccer player of all time ?',\n      answers: ['Leo Messi', 'Pele', 'Maradonna', 'C. Ronaldo'],\n      correctAnswer: 1\n    }];\n  }\n  handleNext(idx, corAnsw) {\n    this.currentIdxSubject.next(this.currentIdxSubject.value + 1);\n    if (idx === corAnsw) {\n      this.correctCountSubject.next(this.correctCountSubject.value + 1);\n    }\n  }\n  ngOnInit() {}\n}\nQuizService.ɵfac = function QuizService_Factory(t) {\n  return new (t || QuizService)();\n};\nQuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuizService,\n  factory: QuizService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","QuizService","constructor","currentIdxSubject","correctCountSubject","progressWidthSubject","currentIdx$","asObservable","correctCount$","progressWidth$","quizData","id","Math","random","toString","question","answers","correctAnswer","handleNext","idx","corAnsw","next","value","ngOnInit","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\Desktop\\angular-quizz\\src\\app\\services\\quiz.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { QuizData } from '../models/models';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuizService implements OnInit {\n  private currentIdxSubject: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  private correctCountSubject: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  private progressWidthSubject: BehaviorSubject<any> = new BehaviorSubject<string | null>('184px')\n  currentIdx$ = this.currentIdxSubject.asObservable();\n  correctCount$ = this.correctCountSubject.asObservable()\n  progressWidth$ = this.progressWidthSubject.asObservable()\n  quizData: QuizData[] = [\n    {\n      id: Math.random().toString(),\n      question: 'How many oceans are there ?',\n      answers: ['Seven', 'Two', 'Four', 'Nine'],\n      correctAnswer: 3,\n    },\n    {\n      id: Math.random().toString(),\n      question: 'Who discovered America ?',\n      answers: ['Mozart', 'Fernan Magellan', 'Vasco Da Gamma', 'Christopher Colombos'],\n      correctAnswer: 4,\n    },\n    {\n      id: Math.random().toString(),\n      question: 'Who is the author of the picture \"Scream\" ?',\n      answers: ['Edvard Munch', 'Salvador Dali', 'Michelangelo', 'Luciano Pavarotti'],\n      correctAnswer: 1,\n    },\n    {\n      id: Math.random().toString(),\n      question: 'Who won the World Cup 2023 ?',\n      answers: ['Armenia', 'Argentina', 'Brazil', 'France'],\n      correctAnswer: 2,\n    },\n    {\n      id: Math.random().toString(),\n      question: 'Who is the best soccer player of all time ?',\n      answers: ['Leo Messi', 'Pele', 'Maradonna', 'C. Ronaldo'],\n      correctAnswer: 1,\n    },\n  ]\n  constructor() { }\n\n  handleNext(idx: number, corAnsw: number) {\n    this.currentIdxSubject.next(this.currentIdxSubject.value + 1);\n\n    if (idx === corAnsw) {\n      this.correctCountSubject.next(this.correctCountSubject.value + 1);\n    }\n  }\n\n  ngOnInit(): void {\n\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,WAAW;EAuCtBC,YAAA;IAtCQ,KAAAC,iBAAiB,GAA4B,IAAIH,eAAe,CAAS,CAAC,CAAC;IAC3E,KAAAI,mBAAmB,GAA4B,IAAIJ,eAAe,CAAS,CAAC,CAAC;IAC7E,KAAAK,oBAAoB,GAAyB,IAAIL,eAAe,CAAgB,OAAO,CAAC;IAChG,KAAAM,WAAW,GAAG,IAAI,CAACH,iBAAiB,CAACI,YAAY,EAAE;IACnD,KAAAC,aAAa,GAAG,IAAI,CAACJ,mBAAmB,CAACG,YAAY,EAAE;IACvD,KAAAE,cAAc,GAAG,IAAI,CAACJ,oBAAoB,CAACE,YAAY,EAAE;IACzD,KAAAG,QAAQ,GAAe,CACrB;MACEC,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,6BAA6B;MACvCC,OAAO,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;MACzCC,aAAa,EAAE;KAChB,EACD;MACEN,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,0BAA0B;MACpCC,OAAO,EAAE,CAAC,QAAQ,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,sBAAsB,CAAC;MAChFC,aAAa,EAAE;KAChB,EACD;MACEN,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,6CAA6C;MACvDC,OAAO,EAAE,CAAC,cAAc,EAAE,eAAe,EAAE,cAAc,EAAE,mBAAmB,CAAC;MAC/EC,aAAa,EAAE;KAChB,EACD;MACEN,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,8BAA8B;MACxCC,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC;MACrDC,aAAa,EAAE;KAChB,EACD;MACEN,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,6CAA6C;MACvDC,OAAO,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,CAAC;MACzDC,aAAa,EAAE;KAChB,CACF;EACe;EAEhBC,UAAUA,CAACC,GAAW,EAAEC,OAAe;IACrC,IAAI,CAACjB,iBAAiB,CAACkB,IAAI,CAAC,IAAI,CAAClB,iBAAiB,CAACmB,KAAK,GAAG,CAAC,CAAC;IAE7D,IAAIH,GAAG,KAAKC,OAAO,EAAE;MACnB,IAAI,CAAChB,mBAAmB,CAACiB,IAAI,CAAC,IAAI,CAACjB,mBAAmB,CAACkB,KAAK,GAAG,CAAC,CAAC;;EAErE;EAEAC,QAAQA,CAAA,GAER;;AAnDWtB,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}