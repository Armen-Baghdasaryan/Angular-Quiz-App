{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class QuizService {\n  constructor() {\n    this.currentIdxSubject = new BehaviorSubject(0);\n    this.currentIdx$ = this.currentIdxSubject.asObservable();\n    this.correctCountSubject = new BehaviorSubject(0);\n    this.correctCount$ = this.correctCountSubject.asObservable();\n    this.progressWidthSubject = new BehaviorSubject(0);\n    this.progressWidth$ = this.progressWidthSubject.asObservable();\n    this.progressElementWidthSubject = new BehaviorSubject(440);\n    this.progressElementWidth$ = this.progressElementWidthSubject.asObservable();\n    this.checkAnsverSubject = new BehaviorSubject(null);\n    this.checkAnswer$ = this.checkAnsverSubject.asObservable();\n    this.answerIsChoosedSubject = new BehaviorSubject(false);\n    this.answerIsChoosed$ = this.answerIsChoosedSubject.asObservable();\n    this.quizData = [{\n      id: Math.random().toString(),\n      question: \"How many oceans are there ?\",\n      answers: [\"Seven\", \"Two\", \"Four\", \"Nine\"],\n      correctAnswer: 3,\n      isChoosed: false\n    }, {\n      id: Math.random().toString(),\n      question: \"Who discovered America ?\",\n      answers: [\"Mozart\", \"Fernan Magellan\", \"Vasco Da Gamma\", \"Christopher Colombos\"],\n      correctAnswer: 4,\n      isChoosed: false\n    }, {\n      id: Math.random().toString(),\n      question: 'Who is the author of the picture \"Scream\" ?',\n      answers: [\"Edvard Munch\", \"Salvador Dali\", \"Michelangelo\", \"Luciano Pavarotti\"],\n      correctAnswer: 1,\n      isChoosed: false\n    }, {\n      id: Math.random().toString(),\n      question: \"Who won the World Cup 2023 ?\",\n      answers: [\"Armenia\", \"Argentina\", \"Brazil\", \"France\"],\n      correctAnswer: 2,\n      isChoosed: false\n    }, {\n      id: Math.random().toString(),\n      question: \"Who is the best soccer player of all time ?\",\n      answers: [\"Leo Messi\", \"Pele\", \"Maradonna\", \"C. Ronaldo\"],\n      correctAnswer: 1,\n      isChoosed: false\n    }];\n  }\n  handleChoose(idx, corAnsw, id) {\n    this.progressWidthSubject.next(this.progressWidthSubject.value + this.progressElementWidthSubject.value / 5);\n    if (idx === corAnsw) {\n      this.correctCountSubject.next(this.correctCountSubject.value + 1);\n      this.checkAnsverSubject.next(true);\n    } else {\n      this.checkAnsverSubject.next(false);\n    }\n    this.answerIsChoosedSubject.next(true);\n    this.handleChangeItem(id);\n  }\n  handleChangeItem(id) {\n    console.log(id);\n  }\n  handleNext() {\n    this.currentIdxSubject.next(this.currentIdxSubject.value + 1);\n    this.checkAnsverSubject.next(null);\n    this.answerIsChoosedSubject.next(false);\n  }\n  updateProgressElementWidth(width) {\n    this.progressElementWidthSubject.next(width);\n  }\n  ngOnInit() {}\n}\nQuizService.ɵfac = function QuizService_Factory(t) {\n  return new (t || QuizService)();\n};\nQuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuizService,\n  factory: QuizService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["BehaviorSubject","QuizService","constructor","currentIdxSubject","currentIdx$","asObservable","correctCountSubject","correctCount$","progressWidthSubject","progressWidth$","progressElementWidthSubject","progressElementWidth$","checkAnsverSubject","checkAnswer$","answerIsChoosedSubject","answerIsChoosed$","quizData","id","Math","random","toString","question","answers","correctAnswer","isChoosed","handleChoose","idx","corAnsw","next","value","handleChangeItem","console","log","handleNext","updateProgressElementWidth","width","ngOnInit","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\Desktop\\angular-quizz\\src\\app\\services\\quiz.service.ts"],"sourcesContent":["import { Injectable, OnInit } from \"@angular/core\";\nimport { QuizData } from \"../models/models\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class QuizService implements OnInit {\n  private currentIdxSubject: BehaviorSubject<number> =\n    new BehaviorSubject<number>(0);\n  currentIdx$ = this.currentIdxSubject.asObservable();\n\n  private correctCountSubject: BehaviorSubject<number> =\n    new BehaviorSubject<number>(0);\n  correctCount$ = this.correctCountSubject.asObservable();\n\n  private progressWidthSubject: BehaviorSubject<any> = new BehaviorSubject<\n    number | null\n  >(0);\n  progressWidth$ = this.progressWidthSubject.asObservable();\n\n  private progressElementWidthSubject: BehaviorSubject<number> =\n    new BehaviorSubject<number>(440);\n  progressElementWidth$ = this.progressElementWidthSubject.asObservable();\n\n  private checkAnsverSubject: BehaviorSubject<any> = new BehaviorSubject<any>(\n    null\n  );\n  checkAnswer$ = this.checkAnsverSubject.asObservable();\n\n  private answerIsChoosedSubject: BehaviorSubject<boolean> =\n    new BehaviorSubject<boolean>(false);\n  answerIsChoosed$ = this.answerIsChoosedSubject.asObservable();\n\n  quizData: QuizData[] = [\n    {\n      id: Math.random().toString(),\n      question: \"How many oceans are there ?\",\n      answers: [\"Seven\", \"Two\", \"Four\", \"Nine\"],\n      correctAnswer: 3,\n      isChoosed: false,\n    },\n    {\n      id: Math.random().toString(),\n      question: \"Who discovered America ?\",\n      answers: [\n        \"Mozart\",\n        \"Fernan Magellan\",\n        \"Vasco Da Gamma\",\n        \"Christopher Colombos\",\n      ],\n      correctAnswer: 4,\n      isChoosed: false,\n    },\n    {\n      id: Math.random().toString(),\n      question: 'Who is the author of the picture \"Scream\" ?',\n      answers: [\n        \"Edvard Munch\",\n        \"Salvador Dali\",\n        \"Michelangelo\",\n        \"Luciano Pavarotti\",\n      ],\n      correctAnswer: 1,\n      isChoosed: false,\n    },\n    {\n      id: Math.random().toString(),\n      question: \"Who won the World Cup 2023 ?\",\n      answers: [\"Armenia\", \"Argentina\", \"Brazil\", \"France\"],\n      correctAnswer: 2,\n      isChoosed: false,\n    },\n    {\n      id: Math.random().toString(),\n      question: \"Who is the best soccer player of all time ?\",\n      answers: [\"Leo Messi\", \"Pele\", \"Maradonna\", \"C. Ronaldo\"],\n      correctAnswer: 1,\n      isChoosed: false,\n    },\n  ];\n\n  constructor() {}\n\n  handleChoose(idx: number, corAnsw: number, id: string) {\n    this.progressWidthSubject.next(\n      this.progressWidthSubject.value +\n        this.progressElementWidthSubject.value / 5\n    );\n\n    if (idx === corAnsw) {\n      this.correctCountSubject.next(this.correctCountSubject.value + 1);\n      this.checkAnsverSubject.next(true);\n    } else {\n      this.checkAnsverSubject.next(false);\n    }\n    this.answerIsChoosedSubject.next(true);\n\n    this.handleChangeItem(id)\n  }\n\n  handleChangeItem(id: string) {\n    console.log(id)\n  }\n\n  handleNext() {\n    this.currentIdxSubject.next(this.currentIdxSubject.value + 1);\n    this.checkAnsverSubject.next(null);\n    this.answerIsChoosedSubject.next(false);\n  }\n\n  updateProgressElementWidth(width: number) {\n    this.progressElementWidthSubject.next(width);\n  }\n\n  ngOnInit(): void {}\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,WAAW;EA2EtBC,YAAA;IA1EQ,KAAAC,iBAAiB,GACvB,IAAIH,eAAe,CAAS,CAAC,CAAC;IAChC,KAAAI,WAAW,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;IAE3C,KAAAC,mBAAmB,GACzB,IAAIN,eAAe,CAAS,CAAC,CAAC;IAChC,KAAAO,aAAa,GAAG,IAAI,CAACD,mBAAmB,CAACD,YAAY,EAAE;IAE/C,KAAAG,oBAAoB,GAAyB,IAAIR,eAAe,CAEtE,CAAC,CAAC;IACJ,KAAAS,cAAc,GAAG,IAAI,CAACD,oBAAoB,CAACH,YAAY,EAAE;IAEjD,KAAAK,2BAA2B,GACjC,IAAIV,eAAe,CAAS,GAAG,CAAC;IAClC,KAAAW,qBAAqB,GAAG,IAAI,CAACD,2BAA2B,CAACL,YAAY,EAAE;IAE/D,KAAAO,kBAAkB,GAAyB,IAAIZ,eAAe,CACpE,IAAI,CACL;IACD,KAAAa,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACP,YAAY,EAAE;IAE7C,KAAAS,sBAAsB,GAC5B,IAAId,eAAe,CAAU,KAAK,CAAC;IACrC,KAAAe,gBAAgB,GAAG,IAAI,CAACD,sBAAsB,CAACT,YAAY,EAAE;IAE7D,KAAAW,QAAQ,GAAe,CACrB;MACEC,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,6BAA6B;MACvCC,OAAO,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;MACzCC,aAAa,EAAE,CAAC;MAChBC,SAAS,EAAE;KACZ,EACD;MACEP,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,0BAA0B;MACpCC,OAAO,EAAE,CACP,QAAQ,EACR,iBAAiB,EACjB,gBAAgB,EAChB,sBAAsB,CACvB;MACDC,aAAa,EAAE,CAAC;MAChBC,SAAS,EAAE;KACZ,EACD;MACEP,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,6CAA6C;MACvDC,OAAO,EAAE,CACP,cAAc,EACd,eAAe,EACf,cAAc,EACd,mBAAmB,CACpB;MACDC,aAAa,EAAE,CAAC;MAChBC,SAAS,EAAE;KACZ,EACD;MACEP,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,8BAA8B;MACxCC,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC;MACrDC,aAAa,EAAE,CAAC;MAChBC,SAAS,EAAE;KACZ,EACD;MACEP,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC5BC,QAAQ,EAAE,6CAA6C;MACvDC,OAAO,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,CAAC;MACzDC,aAAa,EAAE,CAAC;MAChBC,SAAS,EAAE;KACZ,CACF;EAEc;EAEfC,YAAYA,CAACC,GAAW,EAAEC,OAAe,EAAEV,EAAU;IACnD,IAAI,CAACT,oBAAoB,CAACoB,IAAI,CAC5B,IAAI,CAACpB,oBAAoB,CAACqB,KAAK,GAC7B,IAAI,CAACnB,2BAA2B,CAACmB,KAAK,GAAG,CAAC,CAC7C;IAED,IAAIH,GAAG,KAAKC,OAAO,EAAE;MACnB,IAAI,CAACrB,mBAAmB,CAACsB,IAAI,CAAC,IAAI,CAACtB,mBAAmB,CAACuB,KAAK,GAAG,CAAC,CAAC;MACjE,IAAI,CAACjB,kBAAkB,CAACgB,IAAI,CAAC,IAAI,CAAC;KACnC,MAAM;MACL,IAAI,CAAChB,kBAAkB,CAACgB,IAAI,CAAC,KAAK,CAAC;;IAErC,IAAI,CAACd,sBAAsB,CAACc,IAAI,CAAC,IAAI,CAAC;IAEtC,IAAI,CAACE,gBAAgB,CAACb,EAAE,CAAC;EAC3B;EAEAa,gBAAgBA,CAACb,EAAU;IACzBc,OAAO,CAACC,GAAG,CAACf,EAAE,CAAC;EACjB;EAEAgB,UAAUA,CAAA;IACR,IAAI,CAAC9B,iBAAiB,CAACyB,IAAI,CAAC,IAAI,CAACzB,iBAAiB,CAAC0B,KAAK,GAAG,CAAC,CAAC;IAC7D,IAAI,CAACjB,kBAAkB,CAACgB,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACd,sBAAsB,CAACc,IAAI,CAAC,KAAK,CAAC;EACzC;EAEAM,0BAA0BA,CAACC,KAAa;IACtC,IAAI,CAACzB,2BAA2B,CAACkB,IAAI,CAACO,KAAK,CAAC;EAC9C;EAEAC,QAAQA,CAAA,GAAU;;AA5GPnC,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}